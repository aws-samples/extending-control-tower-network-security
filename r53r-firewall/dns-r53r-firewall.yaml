#   create a bucket with versioning, 
#   save bucket name to parameter store
#   create rule group for Ntwk firewall
#   create rule group for R53R firewall
#   create initial firewall list and save firewall-domain-list-id to SSM parameter store
#Associate rule to VPC?
AWSTemplateFormatVersion: 2010-09-09
Description: AWS Network Firewall and Route53 Resolver initial configuration.
Parameters:
  Route53ResolverFirewallRuleGroupName:
    Type: String
    MinLength: '1'
    MaxLength: '64'
    Description: The name of the Route53 Resolver Firewall Rule Group to create
    Default: Initial-Rule-CFN
  NetworkFirewallRuleGroupName:
    Type: String
    MinLength: '1'
    MaxLength: '128'
    Description: The name of the AWS Network Firewall Rule Group to create
    Default: Initial-Rule-CFN
  SCProductVpc:
    Type: String
    MinLength: '1'
    MaxLength: '64'
    Description: The Id of the Firewall VPC
Resources: # central S3 bucket needs to be referenced from new accounts
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
        VersioningConfiguration:
            Status: Enabled
          
  R53RDomainList:
    Type: AWS::Route53Resolver::FirewallDomainList
    Properties:
        Name: User-Managed-Firewall-List
        
  R53RFirewallRuleGroup:
    Type: AWS::Route53Resolver::FirewallRuleGroup
    Properties:
        FirewallRules:
            -
                Action: BLOCK
                BlockResponse: NODATA
                FirewallDomainListId: !GetAtt 'R53RDomainList.Id'
                Priority: 1
        Name: !Ref Route53ResolverFirewallRuleGroupName
# this may have to be part of the SC product...?            
  R53RFirewallRuleGroupAssociation:
    Type: AWS::Route53Resolver::FirewallRuleGroupAssociation
    Properties:
        FirewallRuleGroupId: !Ref R53RFirewallRuleGroup
        MutationProtection: DISABLED
        Name: 'Initial-Rule-CFN-Association'
        Priority: 102
        VpcId: !Ref SCProductVpc

# Will this need to be manually attached to the existing Network Firewall policy?
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkfirewall-firewallpolicy.html
  NtwkFirewallRuleGroup:
    Type: AWS::NetworkFirewall::RuleGroup
    Properties:
        RuleGroupName: !Ref NetworkFirewallRuleGroupName
        Type: STATEFUL
        RuleGroup:
            RulesSource:
                RulesSourceList:
                    TargetTypes: 
                        - HTTP_HOST
                        - TLS_SNI
                    Targets:
                        - '.example.com'
                    GeneratedRulesType: DENYLIST
        Capacity: 1000
        Description: DNS blocklist 

  InvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn: LambdaListSplitFunction
    Properties:
      FunctionName: !GetAtt LambdaListSplitFunction.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !GetAtt S3Bucket.Arn
        
  LambdaListSplitRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: LambdaListSplitPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:PutObject
            - s3:GetObject
            Resource: !Join ['',[!GetAtt 'S3Bucket.Arn', ':/*']]
          - Effect: Allow
            Action:
            - ssm:GetParameter
            Resource: !Join ['',['arn:aws:ssm:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':parameter/', !Ref SSMParameter1]]
          - Effect: Allow
            Action:
            - ssm:GetParameter
            Resource: !Join ['',['arn:aws:ssm:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':parameter/', !Ref SSMParameter2]]
          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: 'arn:aws:logs:*:*:*'

  LambdaListSplitFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Takes a domain list as input from S3, formats it for use with AWS Network Firewall and Route53 Resolver Firewall.
      Handler: index.handler
      Runtime: python3.8
      Role: !GetAtt 'LambdaListSplitRole.Arn'
      Timeout: 240
      Code:
        ZipFile: |
          import boto3
          import json
          s3 = boto3.client('s3')
          r53rclient = boto3.client('route53resolver')
          ssmclient = boto3.client('ssm')
          from botocore.exceptions import ClientError
          ######### 2 lambdas? no, cross-account access to each member account. can we assume existing role that our CFN creates? AWSControlTowerExecutionRole
          localfilename = 'blockeddomains.txt'
          bucketname = 'dns-fw-list-ejkfh4f84'
          objectname = 'blockeddomains.txt'
          s3.download_file(bucketname, objectname, localfilename)
          with open(localfilename, 'r') as f:
              data = f.read()
              f.close()
          strdata = data.splitlines()
          # Append dot to each entry for Ntwk firewall
          def appenddot():
              dot_list = []
              for str in strdata:
                  newstr = '.' + str
                  dot_list.append(newstr)
              return dot_list
              
          dotlist = appenddot()
          #Append asterisk and dot to each entry for R53R firewall
          def appendastr():
              astr_list = []
              for str in dotlist:
                  newstr = '*' + str
                  astr_list.append(newstr)
              return astr_list
          astrlist = appendastr()
          with open ('astrlist.txt', 'w') as filehandle:
              for listitem in astrlist:
                  filehandle.write('%s\n' % listitem)
                  filehandle.close()
          # save R53R (asterisk) file locally
          # save Ntwk firewall (dot) file locally
          # save R53R file to s3 for bulk upload
          def upload_file(file_name, bucket, object_name=None):
              # If S3 object_name was not specified, use file_name
              if object_name is None:
                  object_name = file_name
              # Upload the file
              try:
                  response = s3.upload_file(file_name, bucket, object_name)
              except ClientError as e:
                  logging.error(e)
                  return False
              return True
          upload_file(astrlist.txt, bucketname)
          # Ntwk firewall does not support bulk upload, no need to upload
          response = r53rclient.create_firewall_domain_list(
              Name=domain_list_name
          )
          #Get domain list Id
          response['FirewallDomainList']['Id']
          #Store it in SSM because it's seemingly impossible to retrieve it again
          ssmputresponse = ssmclient.put_parameter(
              Name='r53blocklistId',
              Description='Route53 DNS Firewall List Id',
              Value=response['FirewallDomainList']['Id'],
              Type='String',
              Overwrite=True,
              Tier='Standard',
              DataType='text'
          )
          #Recall the value
          ssmgetresponse = ssmclient.get_parameter(Name='r53blocklistId')
          ssmgetresponse['Parameter']['Value']
          importfwdomainresponse = r53rclient.import_firewall_domains(
              FirewallDomainListId=ssmgetresponse['Parameter']['Value'],
              Operation='REPLACE',
              DomainFileUrl=domain_list_location
          )
          getfwdomainlistresponse = r53rclient.get_firewall_domain_list(
              FirewallDomainListId=ssmgetresponse['Parameter']['Value'],
          )
          domainimportstatusmsg = getfwdomainlistresponse['FirewallDomainList']['StatusMessage']
          domaincount = getfwdomainlistresponse['FirewallDomainList']['DomainCount']

Outputs:
  S3BucketName:
    Value: !Ref 'S3Bucket'
        
  R53RDomainList:
    Value: !GetAtt 'R53RDomainList.Id'
    
  LambdaListSplitFunction:
    Value: !GetAtt 'LambdaListSplitFunction.Arn'
